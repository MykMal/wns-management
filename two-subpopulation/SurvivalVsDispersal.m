% MATLAB code for J Duan, MM Malakhov, JJ Pellett, IS Phadke, J Barber, JC Blackwood. "Management Efficacy in a Metapopulation Model of White-nose Syndrome"

% This program creates four panels, each of which contains a line plot
% displaying percent survival against percent dispersal for all five
% control strategies. Each subplot uses a different intervention intensity,
% but otherwise they are all identical. Here control strategies are only
% implemented in subpopulation A. First, the program creates a
% HibernaculumGrid object, which in turn creates a 1x2 grid of Hibernaculum
% objects. Then, the program runs simulations on the grid for every control
% strategy, for every dispersal value. This process is repeated for each subplot.

% Instructions: Set the disease transmission case, intervention intensities, initial conditions,
% and number of simulation years below. No changes need to be made to other files.

% Dependencies: Hibernaculum.m, HibernaculumGrid.m, and ContourLine.mat
% (generated by ContourPlot.m) must be in the same directory.

% version 08/13/2019
% Copyright (c) 2019 Mykhaylo M. Malakhov

clear all

% create a new figure so other open figures don't get overwritten, and do
% not show it because it will be saved automatically
f = figure('visible','off');

% set the disease case
% 1 denotes primarily environment-to-bat transmission
% 2 denotes equal contributions to disease transmission
% 3 denotes primarily bat-to-bat transmission
diseaseCase = 2;

% set the four intervention intensities to use
controlIntensities = [0.3 0.5 0.7 0.9];

% set the initial condition for subpopulation A
IC1 = [14999 1 0 0 0];

% set the initial condition for subpopulation B
IC2 = [14999 1 0 0 0];

% set the number of years to simulate the model for
years = 10;

% load the 25% survival matrix to later pull out phi, beta pairs for each of the three disease cases
load('ContourLine.mat');

if diseaseCase == 1
    % disease case 1 - primarily environment-to-bat transmission
    beta = contourLine(1, 168);
    phi = contourLine(2,168);
elseif diseaseCase == 2
    % disease case 2 - equal contributions to disease transmission
    beta = contourLine(1,117);
    phi = contourLine(2,117);
else
    % disease case 3 - primarily bat-to-bat transmission
    beta = contourLine(1,57);
    phi = contourLine(2,57);
end

% define the dimensions of HibernaculumGrid
m = 1;
n = 2;

% create a HibernaculumGrid object called grid
grid = HibernaculumGrid(m,n,beta,phi);

% set up the vectors for sweeping over a range of dispersal values
dispersalPercentages = 0 : 0.001 : 0.1;
% dispersalIndices is needed for proper placement of population values into survivalPercentages
dispersalIndices = 1 : length(dispersalPercentages);
% dispersalIntegers is used for the x-axis on plots
dispersalIntegers = dispersalPercentages.*100;
% save the number of data points in each line plot, which will be used for plotting
plotLength = length(dispersalPercentages);

% a cell array storing the line styles for each disease transmission case
lineStyles = {':','--','-','-.','-o'};

% survivalPercentages will store the combined final population values for
% all simulations
survivalPercentages = zeros(4, length(dispersalPercentages), 5);

% loop through the four intervention intensities
for iti = 1 : 4
    
    % set the current intervention intensity
    controlIntensity = controlIntensities(iti);

    % loop through the five control strategies
    for i = 1 : 5
        
        % reset the controls vector
        control1 = zeros(1,5);
        
        % update the parameter values in subpopulation A given the current
        % control at the current intervention intensity
        control1(i) = controlIntensity;
        grid(1,1).value.SetControl(control1);
        
        % loop through the vector of dispersal proportions
        for j = dispersalIndices
            
            % reset the initial conditions for a new simulation
            grid(1,1).value.Reset(IC1)
            grid(1,2).value.Reset(IC2)
            
            % reset the migration matrix with the current dispersal value
            grid.ResetMigration(dispersalPercentages(j))
            
            % simulate the model for the specified number of years
            for year = 1:years
                
                % as in the single hibernaculum model, this keeps track of how many days have elapsed in past years
                yearDays = (year - 1) * 365;
                
                % call the FullYear method in HibernaculumGrid, which includes all
                % dynamics and migration for a single year
                grid.FullYear(yearDays);
            end
            
            % find the combined percent survival of both subpopulations given
            % the current intervention intensity, control strategy, and dispersal value
            survivalPercentages(iti, j, i) = 100 * ((grid(1,1).value.FinalPopulation + grid(1,2).value.FinalPopulation) / (grid(1,1).value.InitialPopulation + grid(1,2).value.InitialPopulation));
            
        end
    end
end

% create a subplot for the first intervention intensity results
subplot(2,2,1)

% loop through the line styles to use a different one for each control strategy
for line = 1:5
    % pull out the first intervention intensity results and plot them
    plot(dispersalIntegers, reshape(survivalPercentages(1,:,line),[plotLength,1]), lineStyles{line}, 'LineWidth', 4, 'MarkerIndices',1:10:plotLength)
    hold on
end

% preserve the correct aspect ratio
axis square
% set the axis limits for aesthetics
axis([0 inf 0 65])

% add a legend and labels
legend('Fungicide', 'Microclimate', 'Soil Bacteria', 'UV', 'Vaccination')
xlabel('Percent Dispersal')
ylabel('Percent Survival')
title("$\alpha =$ " + controlIntensities(1), 'Interpreter', 'latex')

% set figure font size and axes line width
set(gca, 'FontSize', 35, 'LineWidth', 2.5)

% create a subplot for the second intervention intensity results
subplot(2,2,2)

% loop through the line styles to use a different one for each control strategy
for line = 1:5
    % pull out the second intervention intensity results and plot them
    plot(dispersalIntegers, reshape(survivalPercentages(2,:,line),[plotLength,1]), lineStyles{line}, 'LineWidth', 4, 'MarkerIndices',1:10:plotLength)
    hold on
end

% preserve the correct aspect ratio
axis square
% set the axis limits for aesthetics
axis([0 inf 0 65])

% add labels
xlabel('Percent Dispersal')
ylabel('Percent Survival')
title("$\alpha =$ " + controlIntensities(2), 'Interpreter', 'latex')

% set figure font size and axes line width
set(gca, 'FontSize', 35, 'LineWidth', 2.5)

% create a subplot for the third intervention intensity results
subplot(2,2,3)

% loop through the line styles to use a different one for each control strategy
for line = 1:5
    % pull out the second intervention intensity results and plot them
    plot(dispersalIntegers, reshape(survivalPercentages(3,:,line),[plotLength,1]), lineStyles{line}, 'LineWidth', 4, 'MarkerIndices',1:10:plotLength)
    hold on
end

% preserve the correct aspect ratio
axis square
% set the axis limits for aesthetics
axis([0 inf 0 65])

% add labels
xlabel('Percent Dispersal')
ylabel('Percent Survival')
title("$\alpha =$ " + controlIntensities(3), 'Interpreter', 'latex')

% set figure font size and axes line width
set(gca, 'FontSize', 35, 'LineWidth', 2.5)

% create a subplot for the fourth intervention intensity results
subplot(2,2,4)

% loop through the line styles to use a different one for each control strategy
for line = 1:5
    % pull out the second intervention intensity results and plot them
    plot(dispersalIntegers, reshape(survivalPercentages(4,:,line),[plotLength,1]), lineStyles{line}, 'LineWidth', 4, 'MarkerIndices',1:10:plotLength)
    hold on
end

% preserve the correct aspect ratio
axis square
% set the axis limits for aesthetics
axis([0 inf 0 65])

% add labels
xlabel('Percent Dispersal')
ylabel('Percent Survival')
title("$\alpha =$ " + controlIntensities(4), 'Interpreter', 'latex')

% set figure font size and axes line width
set(gca, 'FontSize', 35, 'LineWidth', 2.5)

% set the size of the saved figure
set(gcf,'InvertHardcopy','on');
set(gcf,'PaperUnits', 'inches');
set(gcf,'PaperPosition', [0, 0, 20, 20]);

% save the figure as a JPG with 450 dpi
print(gcf,'SurvivalVsDispersal','-djpeg','-r450')
