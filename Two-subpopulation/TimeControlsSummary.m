% MATLAB code for J Duan, MM Malakhov, JJ Pellett, IS Phadke, J Barber, JC Blackwood. "Management Efficacy in a Spatially Dynamic Model of White-nose Syndrome"

% This program creates four color grids with control strategy in subpopulation A
% on the y-axis and control strategy in subpopulation B on the x-axis. Each
% cell is colored to represent the percentage of bats alive at the end of the
% simulation. The subplots differ only in the number of years simulated. First,
% the program creates a HibernaculumGrid object, which in turn creates a 1x2
% grid of Hibernaculum objects. Then, the program runs simulations on the grid four
% times (for each of the set simulation lengths) for each combination of control strategies,
% and finally displays the results in four subplots.

% Instructions: Set the disease transmission case, dispersal proportion, intervention intensity,
% initial conditions, and number of simulation years below. No changes need to be made to other files.

% Dependencies: Hibernaculum.m, HibernaculumGrid.m, and ContourLine.mat 
% (generated by ContourPlot.m) must be in the same directory.

% version 08/17/2019
% Copyright (c) 2019 Mykhaylo M. Malakhov

clear all

% create a new figure so other open figures don't get overwritten, and do
% not show it because it will be saved automatically
f = figure('visible','off');

% set the disease case
% 1 denotes primarily environment-to-bat transmission
% 2 denotes equal contributions to disease transmission
% 3 denotes primarily bat-to-bat transmission
diseaseCase = 2;

% set the proportion of bats that leave each hibernaculum
dispersal = 0.07;

% set the intervention intensity
controlIntensity = 0.9;

% set the initial condition for subpopulation A
IC1 = [15000 0 0 0 0];

% set the initial condition for subpopulation B
IC2 = [14000 1000 0 0 0];

% set the number of years to simulate the model for -- must use four values
years = [2 5 8 10];

% load the 25% survival matrix to later pull out phi, beta pairs for each of the three disease cases
load('ContourLine.mat');

if diseaseCase == 1
    % disease case 1 - primarily environment-to-bat transmission
    beta = contourLine(1, 168);
    phi = contourLine(2,168);
elseif diseaseCase == 2
    % disease case 2 - equal contributions to disease transmission
    beta = contourLine(1,117);
    phi = contourLine(2,117);
else
    % disease case 3 - primarily bat-to-bat transmission
    beta = contourLine(1,57);
    phi = contourLine(2,57);
end

% define the dimensions of HibernaculumGrid
m = 1;
n = 2;

% create a HibernaculumGrid object called grid
grid = HibernaculumGrid(m,n,beta,phi);

% create the migration matrix with the set dispersal value
grid.ResetMigration(dispersal)

% create an array to store the final values that will be plotted
gridMatrix = zeros(6,6,4);

% loop through control strategies in subpopulation A
for i = 1:6
    
    % reset the controls vector
    control1 = zeros(1,5);
    
    % i = 1 represents no control; update the controls vector for anything
    % other than that
    if i ~= 1
        control1(i-1) = controlIntensity;
    end
    
    % update the parameter values in subpopulation A given the current control
    grid(1,1).value.SetControl(control1)
    
    % loop through control strategies in subpopulation B
    for j = 1:6
        
        % reset the controls vector
        control2 = zeros(1,5);
        
        % i = 1 represents no control; update the controls vector for anything
        % other than that
        if j ~= 1
            control2(j-1) = controlIntensity;
        end
        
        % update the parameter values in subpopulation B given the current control
        grid(1,2).value.SetControl(control2)
        
        % loop through the set simulation lengths
        for k = 1:4
            
			% set the number of years to simulate for
			timeSimulated = years(k);
                
			% reset the initial conditions for a new simulation
			grid(1,1).value.Reset(IC1)
			grid(1,2).value.Reset(IC2)
				
			% simulate the model for the specified number of years
            for year = 1:timeSimulated
             
				% as in the single hibernaculum model, this keeps track of how many
				% days have elapsed in past years
				yearDays = (year - 1) * 365;
				
				% call the FullYear method in HibernaculumGrid, which includes all
				% dynamics and migration for a single year
				grid.FullYear(yearDays);
            end
            
            % find the total percentage survived, and place it in the
            % proper entry of gridMatrix
			gridMatrix(i,j,k) = 100 * ((grid(1,1).value.FinalPopulation + grid(1,2).value.FinalPopulation) / (grid(1,1).value.InitialPopulation + grid(1,2).value.InitialPopulation));
            
        end
    end
end

% create the first subplot
subplot(1,4,1)

% display the first grid of results as an image
imagesc([0 5],[0 5],gridMatrix(:,:,1))
axis square

% make the color map range from 0 to 100
caxis([0 100])
% set the color map to a reversed jet array with 100 colors
colormap(flipud(jet(100)))

% replace the numbers on the axes with letters representing the five controls
xticks([0 1 2 3 4 5])
xticklabels({'N','F','M','B','UV','V'})
yticks([0 1 2 3 4 5])
yticklabels({'N','F','M','B','UV','V'})

% label the axes
xlabel('Control Strategy in Subpopulation B')
ylabel('Control Strategy in Subpopulation A')
title(years(1) + " Years")

% set subplot font size and axes line width
set(gca, 'FontSize', 20, 'LineWidth', 2);

% create the second subplot
subplot(1,4,2)

% display the second grid of results as an image
imagesc([0 5],[0 5],gridMatrix(:,:,2))
axis square

% make the color map range from 0 to 100
caxis([0 100])
% set the color map to a reversed jet array with 100 colors
colormap(flipud(jet(100)))

% replace the numbers on the axes with letters representing the five controls
xticks([0 1 2 3 4 5])
xticklabels({'N','F','M','B','UV','V'})
yticks([0 1 2 3 4 5])
yticklabels({'N','F','M','B','UV','V'})

% label the axes
xlabel('Control Strategy in Subpopulation B')
ylabel('Control Strategy in Subpopulation A')
title(years(2) + " Years")

% set subplot font size and axes line width
set(gca, 'FontSize', 20, 'LineWidth', 2);

% create the third subplot
subplot(1,4,3)

% display the third grid of results as an image
imagesc([0 5],[0 5],gridMatrix(:,:,3))
axis square

% make the color map range from 0 to 100
caxis([0 100])
% set the color map to a reversed jet array with 100 colors
colormap(flipud(jet(100)))

% replace the numbers on the axes with letters representing the five controls
xticks([0 1 2 3 4 5])
xticklabels({'N','F','M','B','UV','V'})
yticks([0 1 2 3 4 5])
yticklabels({'N','F','M','B','UV','V'})

% label the axes
xlabel('Control Strategy in Subpopulation B')
ylabel('Control Strategy in Subpopulation A')
title(years(3) + " Years")

% set subplot font size and axes line width
set(gca, 'FontSize', 20, 'LineWidth', 2);

% create the fourth subplot
s = subplot(1,4,4);

% save the coordinates of the final subplot before adding a color bar
sPos = get(s,'position');

% display the fourth grid of results as an image
imagesc([0 5],[0 5],gridMatrix(:,:,4))
axis square

% make the color map range from 0 to 100
caxis([0 100])
% set the color map to a reversed jet array with 100 colors
colormap(flipud(jet(100)))

% display a color bar showing the color scale
c = colorbar;

% set the color bar label
c.Label.String = 'Percent Survival';

% adding a color bar changes the size of the plot, so now reset it to the
% pre- color bar size to match the other subplots
set(s,'position',sPos);

% replace the numbers on the axes with letters representing the five controls
xticks([0 1 2 3 4 5])
xticklabels({'N','F','M','B','UV','V'})
yticks([0 1 2 3 4 5])
yticklabels({'N','F','M','B','UV','V'})

% label the axes
xlabel('Control Strategy in Subpopulation B')
ylabel('Control Strategy in Subpopulation A')
title(years(4) + " Years")

% set subplot font size and axes line width
set(gca, 'FontSize', 20, 'LineWidth', 2);

% set the size of the saved figure
set(gcf,'InvertHardcopy','on');
set(gcf,'PaperUnits', 'inches');
set(gcf,'PaperPosition', [0, 0, 32, 9]);

% save the figure as a JPG with 450 dpi
print(gcf,'TimeSurvivalGridPlot','-djpeg','-r450')
